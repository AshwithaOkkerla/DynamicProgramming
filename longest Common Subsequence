public:
    // int f(int n,int m,string s1,string s2,vector<vector<int>>&dp){
    //     if(n<0 || m<0) return 0;
        
    //     if(dp[n][m]!=-1) return dp[n][m];
        
    //     if(s1[n]==s2[m]){
    //         return dp[n][m] = 1 + f(n-1,m-1,s1,s2,dp);
    //     }
    //     return dp[n][m] = max(f(n-1,m,s1,s2,dp), f(n,m-1,s1,s2,dp));
    // }
    // //Function to find the length of longest common subsequence in two strings.
    // int lcs(int n, int m, string s1, string s2)
    // {
    //     // your code here
    //     vector<vector<int>>dp(n,vector<int>(m,-1));
    //     return f(n-1,m-1,s1,s2,dp);
    // }


public:
    
    int lcs(int n,int m,string s1,string s2){
        //shifting of index in tabulation
        
        // 0 1 2 3 indx
        // -1 0 1 2 actual indx
        // som m-1 indx is at m
         vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
         // i==0 j==0 is base case
         
         
         for(int i=0;i<=n;i++){
             dp[i][0] = 0;
             
         }
         for(int j=0;j<=m;j++){
             dp[0][j] = 0;
         }
         
         for(int i=1;i<=n;i++){
             for(int j=1;j<=m;j++){
                 if(s1[i-1]==s2[j-1]){
                     dp[i][j] = 1 + dp[i-1][j-1];
                 }
                 else{
                     dp[i][j] = max(dp[i-1][j] , dp[i][j-1]);
                 }
             }
         }
         return dp[n][m];
         
    }

